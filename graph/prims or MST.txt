#include<bits/stdc++.h>
using namespace std;
class graph
{
public:
    int arr[100][100];
    int vertex;
    int edge;
    int state[100];
    int distance[100];
    graph()
    {
        arr[100][100]={0};
        vertex=0;
        edge=0;
        state[100]={0};
        distance[100]={0};
    }
    void createnetwork();
    void prims();
};
void graph::createnetwork()
{
    cout<<"how many vertex ?"<<endl;
    cin>>vertex;
    cout<<"how many edges ? "<<endl;
    cin>>edge;
    for(int i=0;i<vertex;i++)
    {
        for(int j=0;j<vertex;j++)
            arr[i][j]=999;
    }
    cout<<"enter vertex 1, vertex 2 and distance ? "<<endl;
    int v1,v2,d;
    for(int i=0;i<edge;i++)
    {
        cin>>v1>>v2>>d;
        arr[v1][v2]=d;
        arr[v2][v1]=d;
    }
    for(int i=0;i<vertex;i++)
    {
        for(int j=0;j<vertex;j++)
            cout<<arr[i][j]<<" ";
        cout<<endl;
    }
}
void graph :: prims()
{
    int anyvertex,currentvertex,totaldistance=0,visit[1000];
    for(int i=0;i<vertex;i++)
        state[i]=0;
    cout<<"enter the any vertex"<<endl;
    cin>>anyvertex;
    state[anyvertex]=1;
    int n=0;
    visit[n]=anyvertex;
    while(n!=vertex-1)
    {
        int minidist=999;
        for(int i=0;i<=n;i++)
        {
            for(int j=0;j<vertex;j++)
            {
                if(minidist>arr[visit[i]][j] && state[j]==0)
                {
                    minidist=arr[visit[i]][j];
                    currentvertex=j;
                }
            }
        }
        state[currentvertex]=1;
        visit[++n]=currentvertex;
        totaldistance+=minidist;
    }
    cout<<"minimum distance is : "<<totaldistance;
}
int main()
{
    graph g;
    g.createnetwork();
    g.prims();
    return 0;
}
