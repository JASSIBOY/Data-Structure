//application of dijkstra is in Network routing protocols, GPS system , Google maps,computer networking
#include<bits/stdc++.h>
using namespace std;
class graph
{
public:
    int arr[100][100];
    int vertex;
    int edge;
    int state[100];
    int distance[100];
    graph()
    {
        arr[100][100]={0};
        vertex=0;
        edge=0;
        state[100]={0};
        distance[100]={0};
    }
    void createnetwork();
    void dijkstra();
};
void graph::createnetwork()
{
    cout<<"how many vertex ?"<<endl;
    cin>>vertex;
    cout<<"how many edges ? "<<endl;
    cin>>edge;
    for(int i=0;i<vertex;i++)
    {
        for(int j=0;j<vertex;j++)
            arr[i][j]=999;
    }
    cout<<"enter vertex 1, vertex 2 and distance ? "<<endl;
    int v1,v2,d;
    for(int i=0;i<edge;i++)
    {
        cin>>v1>>v2>>d;
        arr[v1][v2]=d;
        arr[v2][v1]=d;
    }
    for(int i=0;i<vertex;i++)
    {
        for(int j=0;j<vertex;j++)
            cout<<arr[i][j]<<" ";
        cout<<endl;
    }
}
void graph :: dijkstra()
{
    int source,currentvertex,currentdist,tot=0;
    for(int i=0;i<vertex;i++)
        state[i]=0;
    cout<<"enter the source vertex"<<endl;
    cin>>source;
    state[source]=1;
    for(int i=0;i<vertex;i++)
        distance[i]=arr[source][i];
    tot++;
    while(tot!=vertex)
    {
        int minidist=999;
        for(int i=0;i<vertex;i++)
        {
            if(minidist>distance[i] && state[i]==0)
            {
                minidist=distance[i];
                currentvertex=i;
            }
        }
        cout<<minidist<<endl;
        state[currentvertex]=1;
        for(int i=0;i<vertex;i++)
        {
            currentdist=arr[currentvertex][i]+minidist;
            if(state[i]==0 && currentdist<distance[i])
                distance[i]=currentdist;
        }

        for(int i=0;i<vertex;i++)
            cout<<distance[i]<<" ";
        cout<<endl;
        tot++;
    }
    cout<<endl;
    for(int i=0;i<vertex;i++)
        cout<<distance[i]<<" ";
}
int main()
{
    graph g;
    g.createnetwork();
    g.dijkstra();
    return 0;
}
